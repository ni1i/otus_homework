Часть 1. Определяем алгоритм с наилучшим сжатием

Делаем пулл зеркалом из двух дисков:
zpool create storage mirror sdb sdc

Сделаем 4 ФС на пуле:
zfs create storage/1
zfs create storage/2
zfs create storage/3
zfs create storage/4

Проверяем состояние компрессии:
zfs get compression,compressratio

Вывод:
NAME       PROPERTY       VALUE     SOURCE
storage    compression    off       default
storage    compressratio  1.00x     -
storage/1  compression    off       default
storage/1  compressratio  1.00x     -
storage/2  compression    off       default
storage/2  compressratio  1.00x     -
storage/3  compression    off       default
storage/3  compressratio  1.00x     -
storage/4  compression    off       default
storage/4  compressratio  1.00x     -

Задаём 4 разных алгоритма компресси:
zfs set compression=lz4 storage/1
zfs set compression=gzip storage/2
zfs set compression=lzjb storage/3
zfs set compression=zle storage/4

Смотрим все уровни компрессии в системе:
zfs get all | grep compression

Скачиваем ядро  linux-5.10.11, распаковываем и переписываем папку /arch (95 Мб) в 4 файловых системы с разными алгоритмами компрессии.
Проверяем состояние компрессии:
zfs get compression,compressratio

Вывод:
NAME       PROPERTY       VALUE     SOURCE
storage    compression    off       default
storage    compressratio  1.88x     -
storage/1  compression    lz4       local
storage/1  compressratio  2.31x     -
storage/2  compression    gzip      local
storage/2  compressratio  3.28x     -
storage/3  compression    lzjb      local
storage/3  compressratio  2.10x     -
storage/4  compression    zle       local
storage/4  compressratio  1.09x     -

Результат zfs list:
NAME        USED  AVAIL     REFER  MOUNTPOINT
storage     250M   582M       28K  /storage
storage/1  51.6M   582M     51.6M  /storage/1
storage/2  37.6M   582M     37.6M  /storage/2
storage/3  56.5M   582M     56.5M  /storage/3
storage/4   104M   582M      104M  /storage/4

Итого по степени компрессии ZFS:  gzip > lz4 > lzjb > zle

####################################################

Часть 2.  Определяем настройки пула

Скачиваем файл с экспортированным пулом на server, распаковываем. Переписываем два файла (filea, fileb) на client в /home/vagrant.

Проверяем наличие пула в скаченных файлах:
[root@client vagrant]# zpool import -d /home/vagrant/
   pool: otus
     id: 6554193320433390805
  state: ONLINE
 action: The pool can be imported using its name or numeric identifier.

 config:
        otus                     ONLINE
          mirror-0               ONLINE
            /home/vagrant/filea  ONLINE
            /home/vagrant/fileb  ONLINE

Импортируем пул "otus":
zpool import -d /home/vagrant/ otus

Проверяем наличие пула и его тип:

[root@client vagrant]# zpool status
  pool: otus
 state: ONLINE
  scan: none requested
config:

        NAME                     STATE     READ WRITE CKSUM
        otus                     ONLINE       0     0     0
          mirror-0               ONLINE       0     0     0
            /home/vagrant/filea  ONLINE       0     0     0
            /home/vagrant/fileb  ONLINE       0     0     0

errors: No known data errors

Размер хранилища:
zfs list
NAME                         USED  AVAIL     REFER     MOUNTPOINT
otus                            2.04M   350M       24K      /otus
otus/hometask2   1.88M   350M     1.88M    /otus/hometask2

Размер recordsize:
zfs get recordsize
NAME            PROPERTY    VALUE    SOURCE
otus            recordsize  128K     local
otus/hometask2  recordsize  128K     inherited from otus

Алгоритм компрессии:
zfs get compression,compressratio
NAME            PROPERTY       VALUE     SOURCE
otus            compression    zle       local
otus            compressratio  1.00x     -
otus/hometask2  compression    zle       inherited from otus
otus/hometask2  compressratio  1.00x     -

Используемые контрольные суммы:
zfs get checksum
NAME            PROPERTY  VALUE      SOURCE
otus            checksum  sha256     local
otus/hometask2  checksum  sha256     inherited from otus

####################################################

Часть 3. Найти сообщение от преподавателей

Скачиваем файл с снапшотом.
Создаём ФС "otus/storage":
zfs create otus/storage

Импортируем снапшот:
zfs receive otus/storage/text2 < otus_task2.file

Ищем файл secret_message:
find /otus/storage/ -name sec*
/otus/storage/text2/task1/file_mess/secret_message

Содержимое файла:
https://github.com/sindresorhus/awesome